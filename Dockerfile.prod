FROM node:22.4.1-alpine AS base

# RUN npm install -g npm@10.3.0

# Install dependencies only when needed
FROM base AS deps
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install dependencies based on the preferred package manager
COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* .npmrc* ./

RUN \
  if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
  elif [ -f package-lock.json ]; then npm ci; \
  elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm i --frozen-lockfile; \
  else echo "Lockfile not found." && exit 1; \
  fi

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

RUN corepack enable pnpm && pnpm drizzle-kit generate
# RUN --mount=type=secret,id=POSTGRES_HOST,env=POSTGRES_HOST \
#     --mount=type=secret,id=POSTGRES_USER,env=POSTGRES_USER \
#     --mount=type=secret,id=POSTGRES_PASSWORD,env=POSTGRES_PASSWORD \
#     --mount=type=secret,id=POSTGRES_PORT,env=POSTGRES_PORT \
#     --mount=type=secret,id=POSTGRES_DB,env=POSTGRES_DB
# ARG POSTGRES_HOST
# ARG POSTGRES_DB
# ARG POSTGRES_USER
# ARG POSTGRES_PASSWORD
# ARG POSTGRES_PORT

# ENV POSTGRES_HOST=${POSTGRES_HOST}
# ENV POSTGRES_DB=${POSTGRES_DB}
# ENV POSTGRES_USER=${POSTGRES_USER}
# ENV POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
# ENV POSTGRES_PORT=${POSTGRES_PORT}

# Next.js collects completely anonymous telemetry data about general usage.
# Learn more here: https://nextjs.org/telemetry
# Uncomment the following line in case you want to disable telemetry during the build.
# ENV NEXT_TELEMETRY_DISABLED=1

RUN \
  if [ -f yarn.lock ]; then yarn run build; \
  elif [ -f package-lock.json ]; then npm run build; \
  elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm run build; \
  else echo "Lockfile not found." && exit 1; \
  fi

# Need to create a new package.json so it works independantly from stantalone deps
# Install bare minimum dependancies to run migrate
RUN mkdir migrations
WORKDIR /app/migrations
RUN corepack enable pnpm && pnpm init
RUN pnpm add drizzle-kit drizzle-orm

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production
# Uncomment the following line in case you want to disable telemetry during runtime.
# ENV NEXT_TELEMETRY_DISABLED=1

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY --from=builder /app/public ./public

# Set the correct permission for prerender cache
WORKDIR /app
RUN mkdir .next
RUN chown nextjs:nodejs .next
RUN mkdir migrations
RUN chown nextjs:nodejs migrations

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

COPY --from=builder --chown=nextjs:nodejs /app/migrations ./migrations
COPY --from=builder --chown=nextjs:nodejs /app/drizzle ./migrations/drizzle
COPY --from=builder --chown=nextjs:nodejs /app/drizzle.config.ts ./migrations/drizzle.config.ts

# RUN chown nextjs:nodejs migrations

USER nextjs

EXPOSE 3000

ENV PORT=3000

# server.js is created by next build from the standalone output
# https://nextjs.org/docs/pages/api-reference/next-config-js/output
ENV HOSTNAME="0.0.0.0"

# CMD pnpm -C /app/migrations drizzle-kit migrate && node server.js
CMD cd ./migrations && npx drizzle-kit migrate && cd .. && node server.js